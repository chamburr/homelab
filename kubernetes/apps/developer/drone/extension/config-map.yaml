---
apiVersion: v1
kind: ConfigMap
metadata:
  name: drone-extension
  namespace: developer
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
data:
  index.js: |
    const http = require('http')

    async function handle(req, res, body) {
      let opts = {
        headers: {
          Accept: 'application/vnd.github+json',
          Authorization: `Bearer ${process.env.GITHUB_TOKEN}`
        }
      }

      if (req.url === '/yaml') {
        let slug = body.repo.slug
        let data = await fetch(`https://api.github.com/repos/${slug}/contents/.drone`, opts)
        data = await data.json()

        if (data.message === 'Not Found') {
          res.write('{"data": ""}')
          return
        }

        let files = []
        for (let file of data) {
          if (file.name.startsWith('_')) continue
          if (!file.name.endsWith('.yaml') && !file.name.endsWith('.yml')) continue

          file = await fetch(file.url.split('?')[0], opts)
          file = await file.json()
          file = Buffer.from(file.content, 'base64').toString('utf-8')

          file = file.replaceAll(
            /\nkind: pipeline\n(?!type)/g,
            '\nkind: pipeline\ntype: kubernetes\n'
          )

          files.push(file)
        }

        res.write(`{"data": ${JSON.stringify(files.join('\n'))}}`)

        return
      }

      if (req.url === '/validate') {
        let event = body.build.event
        let source = body.build.fork.toLowerCase()
        let target = body.repo.slug.toLowerCase()

        if (event === 'pull_request' && source !== target) {
          res.statusCode = 499
        }

        res.write('{"message": "success"}')

        return
      }

      res.write('{"success": true}')
    }

    http
      .createServer((req, res) => {
        res.statusCode = 200
        res.setHeader('Content-Type', 'application/json')

        let body = []
        req
          .on('data', chunk => body.push(chunk))
          .on('end', async () => {
            body = Buffer.concat(body).toString() || '{}'
            body = JSON.parse(body)

            await handle(req, res, body)

            res.end()
          })
      })
      .listen({
        host: '0.0.0.0',
        port: 3000
      })
